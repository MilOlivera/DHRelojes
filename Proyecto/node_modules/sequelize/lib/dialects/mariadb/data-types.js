<<<<<<< HEAD
'use strict';

const _ = require('lodash');
const moment = require('moment-timezone');

module.exports = BaseTypes => {
  BaseTypes.ABSTRACT.prototype.dialectTypes = 'https://mariadb.com/kb/en/library/resultset/#field-types';

  /**
   * types: [buffer_type, ...]
   * @see documentation : https://mariadb.com/kb/en/library/resultset/#field-types
   * @see connector implementation : https://github.com/MariaDB/mariadb-connector-nodejs/blob/master/lib/const/field-type.js
   */

  BaseTypes.DATE.types.mariadb = ['DATETIME'];
  BaseTypes.STRING.types.mariadb = ['VAR_STRING'];
  BaseTypes.CHAR.types.mariadb = ['STRING'];
  BaseTypes.TEXT.types.mariadb = ['BLOB'];
  BaseTypes.TINYINT.types.mariadb = ['TINY'];
  BaseTypes.SMALLINT.types.mariadb = ['SHORT'];
  BaseTypes.MEDIUMINT.types.mariadb = ['INT24'];
  BaseTypes.INTEGER.types.mariadb = ['LONG'];
  BaseTypes.BIGINT.types.mariadb = ['LONGLONG'];
  BaseTypes.FLOAT.types.mariadb = ['FLOAT'];
  BaseTypes.TIME.types.mariadb = ['TIME'];
  BaseTypes.DATEONLY.types.mariadb = ['DATE'];
  BaseTypes.BOOLEAN.types.mariadb = ['TINY'];
  BaseTypes.BLOB.types.mariadb = ['TINYBLOB', 'BLOB', 'LONGBLOB'];
  BaseTypes.DECIMAL.types.mariadb = ['NEWDECIMAL'];
  BaseTypes.UUID.types.mariadb = false;
  BaseTypes.ENUM.types.mariadb = false;
  BaseTypes.REAL.types.mariadb = ['DOUBLE'];
  BaseTypes.DOUBLE.types.mariadb = ['DOUBLE'];
  BaseTypes.GEOMETRY.types.mariadb = ['GEOMETRY'];
  BaseTypes.JSON.types.mariadb = ['JSON'];

=======
"use strict";
const wkx = require("wkx");
const _ = require("lodash");
const momentTz = require("moment-timezone");
const moment = require("moment");
module.exports = (BaseTypes) => {
  BaseTypes.ABSTRACT.prototype.dialectTypes = "https://mariadb.com/kb/en/library/resultset/#field-types";
  BaseTypes.DATE.types.mariadb = ["DATETIME"];
  BaseTypes.STRING.types.mariadb = ["VAR_STRING"];
  BaseTypes.CHAR.types.mariadb = ["STRING"];
  BaseTypes.TEXT.types.mariadb = ["BLOB"];
  BaseTypes.TINYINT.types.mariadb = ["TINY"];
  BaseTypes.SMALLINT.types.mariadb = ["SHORT"];
  BaseTypes.MEDIUMINT.types.mariadb = ["INT24"];
  BaseTypes.INTEGER.types.mariadb = ["LONG"];
  BaseTypes.BIGINT.types.mariadb = ["LONGLONG"];
  BaseTypes.FLOAT.types.mariadb = ["FLOAT"];
  BaseTypes.TIME.types.mariadb = ["TIME"];
  BaseTypes.DATEONLY.types.mariadb = ["DATE"];
  BaseTypes.BOOLEAN.types.mariadb = ["TINY"];
  BaseTypes.BLOB.types.mariadb = ["TINYBLOB", "BLOB", "LONGBLOB"];
  BaseTypes.DECIMAL.types.mariadb = ["NEWDECIMAL"];
  BaseTypes.UUID.types.mariadb = false;
  BaseTypes.ENUM.types.mariadb = false;
  BaseTypes.REAL.types.mariadb = ["DOUBLE"];
  BaseTypes.DOUBLE.types.mariadb = ["DOUBLE"];
  BaseTypes.GEOMETRY.types.mariadb = ["GEOMETRY"];
  BaseTypes.JSON.types.mariadb = ["JSON"];
>>>>>>> e63ce884e0231dbc908a29214b51bd3cf50ef810
  class DECIMAL extends BaseTypes.DECIMAL {
    toSql() {
      let definition = super.toSql();
      if (this._unsigned) {
<<<<<<< HEAD
        definition += ' UNSIGNED';
      }
      if (this._zerofill) {
        definition += ' ZEROFILL';
=======
        definition += " UNSIGNED";
      }
      if (this._zerofill) {
        definition += " ZEROFILL";
>>>>>>> e63ce884e0231dbc908a29214b51bd3cf50ef810
      }
      return definition;
    }
  }
<<<<<<< HEAD

  class DATE extends BaseTypes.DATE {
    toSql() {
      return `DATETIME${this._length ? `(${this._length})` : ''}`;
    }
    _stringify(date, options) {
      date = this._applyTimezone(date, options);
      return date.format('YYYY-MM-DD HH:mm:ss.SSS');
=======
  class DATE extends BaseTypes.DATE {
    toSql() {
      return this._length ? `DATETIME(${this._length})` : "DATETIME";
    }
    _stringify(date, options) {
      if (!moment.isMoment(date)) {
        date = this._applyTimezone(date, options);
      }
      return date.format("YYYY-MM-DD HH:mm:ss.SSS");
>>>>>>> e63ce884e0231dbc908a29214b51bd3cf50ef810
    }
    static parse(value, options) {
      value = value.string();
      if (value === null) {
        return value;
      }
<<<<<<< HEAD
      if (moment.tz.zone(options.timezone)) {
        value = moment.tz(value, options.timezone).toDate();
      }
      else {
=======
      if (momentTz.tz.zone(options.timezone)) {
        value = momentTz.tz(value, options.timezone).toDate();
      } else {
>>>>>>> e63ce884e0231dbc908a29214b51bd3cf50ef810
        value = new Date(`${value} ${options.timezone}`);
      }
      return value;
    }
  }
<<<<<<< HEAD

=======
>>>>>>> e63ce884e0231dbc908a29214b51bd3cf50ef810
  class DATEONLY extends BaseTypes.DATEONLY {
    static parse(value) {
      return value.string();
    }
  }
<<<<<<< HEAD

  class UUID extends BaseTypes.UUID {
    toSql() {
      return 'CHAR(36) BINARY';
    }
  }

=======
  class UUID extends BaseTypes.UUID {
    toSql() {
      return "CHAR(36) BINARY";
    }
  }
>>>>>>> e63ce884e0231dbc908a29214b51bd3cf50ef810
  class GEOMETRY extends BaseTypes.GEOMETRY {
    constructor(type, srid) {
      super(type, srid);
      if (_.isEmpty(this.type)) {
        this.sqlType = this.key;
<<<<<<< HEAD
      }
      else {
        this.sqlType = this.type;
      }
    }
=======
      } else {
        this.sqlType = this.type;
      }
    }
    static parse(value) {
      value = value.buffer();
      if (!value || value.length === 0) {
        return null;
      }
      value = value.slice(4);
      return wkx.Geometry.parse(value).toGeoJSON({ shortCrs: true });
    }
>>>>>>> e63ce884e0231dbc908a29214b51bd3cf50ef810
    toSql() {
      return this.sqlType;
    }
  }
<<<<<<< HEAD

  class ENUM extends BaseTypes.ENUM {
    toSql(options) {
      return `ENUM(${this.values.map(value => options.escape(value)).join(', ')})`;
    }
  }

  class JSONTYPE extends BaseTypes.JSON {
    _stringify(value, options) {
      return options.operation === 'where' && typeof value === 'string' ? value
        : JSON.stringify(value);
    }
  }

=======
  class ENUM extends BaseTypes.ENUM {
    toSql(options) {
      return `ENUM(${this.values.map((value) => options.escape(value)).join(", ")})`;
    }
  }
  class JSONTYPE extends BaseTypes.JSON {
    _stringify(value, options) {
      return options.operation === "where" && typeof value === "string" ? value : JSON.stringify(value);
    }
  }
>>>>>>> e63ce884e0231dbc908a29214b51bd3cf50ef810
  return {
    ENUM,
    DATE,
    DATEONLY,
    UUID,
    GEOMETRY,
    DECIMAL,
    JSON: JSONTYPE
  };
};
<<<<<<< HEAD
=======
//# sourceMappingURL=data-types.js.map
>>>>>>> e63ce884e0231dbc908a29214b51bd3cf50ef810
